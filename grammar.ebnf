unit = {declaration};


declaration
	= letDeclaration
	| methodDeclaration
	;

letDeclaration = "let" IDENTIFIER [":" ["const"] IDENTIFIER] ["=" (LITERAL | IDENTIFIER | expresion)];

namespaceDeclaration = "space" "{" {declaration} "}";

typeDeclaration = "type" "{" letDeclaration "}";

enumDeclaration = "enum" "{" [enumMember {"," enumMember} ] "}";

enumMember = IDENTIFIER ["(" IDENTIFIER ")"];

methodDeclaration = "fn" IDENTIFIER "(" [parameter {"," parameter}] ")" [IDENTIFIER] "{" [statement] "}";

scope = statement | "{" {statement} "}";

statement
	= declaration
	| ("if" expresion statement ["else" statement])
	| ("match" expresion "{" {(IDENTIFIER | expresion) "->" scope} [(UNDERSCORE) "->" scope] "}")
	| scope
	;

expresion = binary {operatorLow binary};

binary = [("-" | "!")] value [operatorHight binary];

value = LITERAL | ("(" expresion ")");

operatorLow
	= "==" | "!=" | "<" | "<=" | ">" | ">="
	| "&" | "|" | "~" | "^" | "<<" | ">>"
	| "+" | "-";

operatorHight = "*" | "/";
